

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Program [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = TopFnDef FnDef
    | ClassExtDef Ident Ident [Property]
    | ClassDef Ident [Property]
  deriving (Eq, Ord, Show, Read)

data Property = FnProp FnDef | AttrProp Type Ident
  deriving (Eq, Ord, Show, Read)

data Arg = Arg Type Ident
  deriving (Eq, Ord, Show, Read)

data FnDef = FnDef Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Block = Block [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass Expr Expr
    | Incr Expr
    | Decr Expr
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | SExp Expr
    | For Type Ident Expr Stmt
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data Type
    = Int
    | Str
    | Bool
    | Void
    | ArrType Type
    | ClsType Ident
    | Fun Type [Type]
    | Arr Type Integer
    | Pointer Type
    | VTable Ident
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ELitInt Integer
    | ELitTrue
    | ELitFalse
    | ENewCls Type
    | ENewArr Type Expr
    | EApp Ident [Expr]
    | EPropApp Expr Ident [Expr]
    | EProp Expr Ident
    | EArrGet Expr Expr
    | ENullCast Ident
    | EString String
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Read)

instance Show AddOp where
  show (Plus) = "add"
  show (Minus) = "sub"

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Read)

instance Show MulOp where
  show (Times) = "mul"
  show (Div) = "sdiv"
  show (Mod) = "srem"

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Read)

instance Show RelOp where
  show (LTH) = "icmp slt"
  show (LE) = "icmp sle"
  show (GTH) = "icmp sgt"
  show (GE) = "icmp sge"
  show (EQU) = "icmp eq"
  show (NE) = "icmp ne"



-- automatically generated by BNF Converter
module Main where


import System.IO ( stdin, hGetContents )
import System.Environment ( getArgs, getProgName )
import System.Exit ( exitFailure, exitSuccess )
import System.Process
import System.FilePath

import LexLatte
import ParLatte
import qualified Frontend as Frontend
import qualified Backend as Backend
import PrintLatte
import AbsLatte




import ErrM

type ParseFun a = [Token] -> Err a

myLLexer = myLexer

runFile :: FilePath -> IO ()
runFile f = putStrLn f >> readFile f >>= (run f)

compile :: FilePath -> Program -> IO ()
compile fp program = do
  result <- Frontend.runCheck Frontend.getInitialStore Frontend.getInitialEnv (Frontend.checkProgram program)
  case result of
    Left message -> do
      putStrLn "ERROR"
      putStrLn message
      exitFailure
    Right optimizedProgram -> do
      putStrLn "OK"
      compiledResult <- Backend.runCompilation Backend.getInitialStore Backend.getInitialEnv (Backend.compileProgram optimizedProgram)
      case compiledResult of
        Left msg -> do
          putStrLn "ERROR"
          putStrLn msg
          exitFailure
        Right compiledText -> do
          --putStrLn compiledText
          --exitSuccess
          let llPath = replaceFileName fp ((takeBaseName fp) ++ ".ll")
              bcPath = replaceFileName fp ((takeBaseName fp) ++ ".bc") in do
            writeFile llPath compiledText
            _ <- runCommand ("llvm-as " ++ (llPath))
            exitSuccess


run :: FilePath -> String -> IO ()
run fp s = let ts = myLLexer s in case pProgram ts of
  Bad s -> do
    putStrLn "\nParse              Failed...\n"
    putStrLn s
    exitFailure
  Ok program -> compile fp program

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (file)         Parse content of file verbosely."
    ]
  exitFailure

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    fs -> mapM_ (runFile) fs





